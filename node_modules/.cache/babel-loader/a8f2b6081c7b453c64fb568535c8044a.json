{"ast":null,"code":"var _jsxFileName = \"/Users/ZVR/OneDrive/FULLSTACK/Strangers_Things/src/components/PostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { callApi } from '../api';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Button, Container } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostForm = _ref => {\n  _s();\n\n  let {\n    token,\n    setPosts,\n    posts,\n    action\n  } = _ref;\n  const {\n    postId\n  } = useParams();\n  const history = useHistory();\n  const [newPost, setNewPost] = useState({\n    title: '',\n    description: '',\n    price: 0,\n    location: '',\n    willDeliver: false\n  });\n  const isEdit = action === 'edit';\n  const title = isEdit ? 'Edit this post' : 'Add a new post';\n  const method = isEdit ? 'PATCH' : 'POST';\n  const API_URL = isEdit ? `/posts/${postId}` : `/posts`;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      // console.log('submitted')\n      const {\n        data: {\n          post\n        }\n      } = await callApi({\n        url: API_URL,\n        method: method,\n        body: {\n          post: {\n            title: newPost.title,\n            description: newPost.description,\n            price: newPost.price,\n            location: newPost.location,\n            willDeliver: newPost.willDeliver\n          }\n        },\n        token\n      });\n\n      if (isEdit) {\n        const filteredPosts = posts.filter(post => post._id !== postId);\n        setPosts([...filteredPosts, post]);\n      } else {\n        setPosts([...posts, post]);\n      }\n\n      history.push('/posts');\n    } catch (error) {\n      console.error('error adding a post: ', error);\n    }\n  };\n\n  const postFieldChange = property => event => {\n    if (property === 'willDeliver') {\n      setNewPost({ ...newPost,\n        [property]: event.target.checked\n      });\n    } else {\n      setNewPost({ ...newPost,\n        [property]: event.target.value\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Title Of Post\",\n          value: newPost.title,\n          onChange: postFieldChange('title')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          rows: \"6\",\n          placeholder: \"Description\",\n          value: newPost.description,\n          onChange: postFieldChange('description')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Price of Item\",\n          value: newPost.price,\n          onChange: postFieldChange('price')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Location\",\n          value: newPost.location,\n          onChange: postFieldChange('location')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Deliver?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          value: newPost.willDeliver,\n          onChange: postFieldChange('willDeliver')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this), token ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          type: \"submit\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 18\n        }, this) : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostForm, \"AcHmtvTFTV9UEJJ7YZPXVKu2wvw=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/ZVR/OneDrive/FULLSTACK/Strangers_Things/src/components/PostForm.js"],"names":["React","useState","callApi","useHistory","useParams","Button","Container","PostForm","token","setPosts","posts","action","postId","history","newPost","setNewPost","title","description","price","location","willDeliver","isEdit","method","API_URL","handleSubmit","event","preventDefault","data","post","url","body","filteredPosts","filter","_id","push","error","console","postFieldChange","property","target","checked","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,iBAAlC;;;AAEA,MAAMC,QAAQ,GAAG,QAAwC;AAAA;;AAAA,MAAvC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,KAAnB;AAA0BC,IAAAA;AAA1B,GAAuC;AACrD,QAAM;AAAEC,IAAAA;AAAF,MAAaR,SAAS,EAA5B;AACA,QAAMS,OAAO,GAAGV,UAAU,EAA1B;AAEA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC;AACnCe,IAAAA,KAAK,EAAE,EAD4B;AAEnCC,IAAAA,WAAW,EAAE,EAFsB;AAGnCC,IAAAA,KAAK,EAAE,CAH4B;AAInCC,IAAAA,QAAQ,EAAE,EAJyB;AAKnCC,IAAAA,WAAW,EAAE;AALsB,GAAD,CAAtC;AAOA,QAAMC,MAAM,GAAGV,MAAM,KAAK,MAA1B;AACA,QAAMK,KAAK,GAAGK,MAAM,GAAG,gBAAH,GAAsB,gBAA1C;AACA,QAAMC,MAAM,GAAGD,MAAM,GAAG,OAAH,GAAa,MAAlC;AACA,QAAME,OAAO,GAAGF,MAAM,GAAI,UAAST,MAAO,EAApB,GAAyB,QAA/C;;AAEF,QAAMY,YAAY,GAAG,MAAOC,KAAP,IAAiB;AAEpCA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAI;AACA;AACA,YAAM;AACFC,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AADJ,UAEF,MAAM1B,OAAO,CAAC;AACd2B,QAAAA,GAAG,EAAEN,OADS;AAEdD,QAAAA,MAAM,EAAEA,MAFM;AAGdQ,QAAAA,IAAI,EAAE;AACFF,UAAAA,IAAI,EAAE;AACNZ,YAAAA,KAAK,EAAEF,OAAO,CAACE,KADT;AAENC,YAAAA,WAAW,EAAEH,OAAO,CAACG,WAFf;AAGNC,YAAAA,KAAK,EAAEJ,OAAO,CAACI,KAHT;AAINC,YAAAA,QAAQ,EAAEL,OAAO,CAACK,QAJZ;AAKNC,YAAAA,WAAW,EAAEN,OAAO,CAACM;AALf;AADJ,SAHQ;AAYdZ,QAAAA;AAZc,OAAD,CAFjB;;AAgBA,UAAGa,MAAH,EAAW;AACP,cAAMU,aAAa,GAAGrB,KAAK,CAACsB,MAAN,CAAcJ,IAAD,IAASA,IAAI,CAACK,GAAL,KAAarB,MAAnC,CAAtB;AACAH,QAAAA,QAAQ,CAAC,CAAC,GAAGsB,aAAJ,EAAmBH,IAAnB,CAAD,CAAR;AACH,OAHD,MAGO;AACHnB,QAAAA,QAAQ,CAAC,CAAC,GAAGC,KAAJ,EAAWkB,IAAX,CAAD,CAAR;AACH;;AACDf,MAAAA,OAAO,CAACqB,IAAR,CAAa,QAAb;AACH,KAzBD,CAyBE,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACH;AACF,GA/BD;;AAiCA,QAAME,eAAe,GAAIC,QAAD,IAAeb,KAAD,IAAW;AAE/C,QAAGa,QAAQ,KAAK,aAAhB,EAA8B;AAC1BvB,MAAAA,UAAU,CAAC,EAAC,GAAGD,OAAJ;AAAa,SAACwB,QAAD,GAAYb,KAAK,CAACc,MAAN,CAAaC;AAAtC,OAAD,CAAV;AACH,KAFD,MAEO;AACHzB,MAAAA,UAAU,CAAC,EAAC,GAAGD,OAAJ;AAAa,SAACwB,QAAD,GAAYb,KAAK,CAACc,MAAN,CAAaE;AAAtC,OAAD,CAAV;AACH;AACJ,GAPC;;AASA,sBACE,QAAC,SAAD;AAAA,2BACA;AAAA,8BACI;AAAA,kBAAKzB;AAAL;AAAA;AAAA;AAAA;AAAA,cADJ,eAEE;AAAM,QAAA,QAAQ,EAAEQ,YAAhB;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,WAAW,EAAC,eAFd;AAGE,UAAA,KAAK,EAAEV,OAAO,CAACE,KAHjB;AAIE,UAAA,QAAQ,EAAEqB,eAAe,CAAC,OAAD;AAJ3B;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AAAA;AAAA;AAAA;AAAA,gBAPF,eASE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,GAFP;AAGE,UAAA,WAAW,EAAC,aAHd;AAIE,UAAA,KAAK,EAAEvB,OAAO,CAACG,WAJjB;AAKE,UAAA,QAAQ,EAAEoB,eAAe,CAAC,aAAD;AAL3B;AAAA;AAAA;AAAA;AAAA,gBATF,eAgBE;AAAA;AAAA;AAAA;AAAA,gBAhBF,eAkBE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,WAAW,EAAC,eAFd;AAGE,UAAA,KAAK,EAAEvB,OAAO,CAACI,KAHjB;AAIE,UAAA,QAAQ,EAAEmB,eAAe,CAAC,OAAD;AAJ3B;AAAA;AAAA;AAAA;AAAA,gBAlBF,eAwBE;AAAA;AAAA;AAAA;AAAA,gBAxBF,eA0BE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,WAAW,EAAC,UAFd;AAGE,UAAA,KAAK,EAAEvB,OAAO,CAACK,QAHjB;AAIE,UAAA,QAAQ,EAAEkB,eAAe,CAAC,UAAD;AAJ3B;AAAA;AAAA;AAAA;AAAA,gBA1BF,eAgCE;AAAA;AAAA;AAAA;AAAA,gBAhCF,eAiCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjCF,eAkCE;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,KAAK,EAAEvB,OAAO,CAACM,WAFjB;AAGE,UAAA,QAAQ,EAAEiB,eAAe,CAAC,aAAD;AAH3B;AAAA;AAAA;AAAA;AAAA,gBAlCF,eAuCE;AAAA;AAAA;AAAA;AAAA,gBAvCF,EAyCG7B,KAAK,gBAAG,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AAA4B,UAAA,IAAI,EAAC,QAAjC;AAAA,oBAA2CQ;AAA3C;AAAA;AAAA;AAAA;AAAA,gBAAH,GAAgE,EAzCxE;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AAkDD,CA5GD;;GAAMT,Q;UACiBH,S,EACHD,U;;;KAFdI,Q;AA8GN,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport { callApi } from '../api';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Button, Container } from 'react-bootstrap';\n\nconst PostForm = ({ token, setPosts, posts, action }) => {\n    const { postId } = useParams();\n    const history = useHistory();\n\n    const [newPost, setNewPost] = useState({\n        title: '',\n        description: '',\n        price: 0,\n        location: '',\n        willDeliver: false,\n    });\n    const isEdit = action === 'edit';\n    const title = isEdit ? 'Edit this post' : 'Add a new post';\n    const method = isEdit ? 'PATCH' : 'POST';\n    const API_URL = isEdit ? `/posts/${postId}` : `/posts`;\n\n  const handleSubmit = async (event) => {\n\n    event.preventDefault();\n    try {\n        // console.log('submitted')\n        const {\n            data: { post },\n        } = await callApi({\n            url: API_URL,\n            method: method,\n            body: {\n                post: {\n                title: newPost.title,\n                description: newPost.description,\n                price: newPost.price,\n                location: newPost.location,\n                willDeliver: newPost.willDeliver\n                },\n            },\n            token,\n            });\n        if(isEdit) {\n            const filteredPosts = posts.filter((post)=> post._id !== postId);\n            setPosts([...filteredPosts, post]);\n        } else {\n            setPosts([...posts, post]);\n        }\n        history.push('/posts');\n    } catch (error) {\n        console.error('error adding a post: ', error);\n    }\n  };\n\n  const postFieldChange = (property) => (event) => {\n\n    if(property === 'willDeliver'){\n        setNewPost({...newPost, [property]: event.target.checked})\n    } else {\n        setNewPost({...newPost, [property]: event.target.value});\n    }\n};\n\n  return (\n    <Container>\n    <div>\n        <h2>{title}</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type='text'\n          placeholder='Title Of Post'\n          value={newPost.title}\n          onChange={postFieldChange('title')}\n        ></input>\n        <br />\n\n        <textarea\n          type='text'\n          rows='6'\n          placeholder='Description'\n          value={newPost.description}\n          onChange={postFieldChange('description')}\n        ></textarea>\n        <br />\n\n        <input\n          type='number'\n          placeholder='Price of Item'\n          value={newPost.price}\n          onChange={postFieldChange('price')}\n        ></input>\n        <br />\n\n        <input\n          type='text'\n          placeholder='Location'\n          value={newPost.location}\n          onChange={postFieldChange('location')}\n        ></input>\n        <br />\n        <label>Deliver?</label>\n        <input\n          type='checkbox'\n          value={newPost.willDeliver}\n          onChange={postFieldChange('willDeliver')}\n        ></input>\n        <br />\n\n        {token ? <Button variant='secondary' type='submit'>{title}</Button> : ''}\n      </form>\n    </div>\n    </Container>\n  );\n};\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}